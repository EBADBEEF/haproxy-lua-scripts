global
  # levels: emerg alert crit err warning notice info debug
  log stdout format raw daemon alert

  # Note: To load modules inside of lua, set environment variables LUA_PATH and
  # LUA_CPATH, or use "lua-prepend-path <path> path" "lua-prepend-path <path>
  # cpath"

  # Run concurrently per thread instead of having a global lua lock
  lua-load-per-thread socks5.lua

  # One global thread because of session table
  lua-load auth.lua

  # By default any logs in a lua module go to any attached logger and also to
  # stderr. Change the settings to only log to stderr if no logger is
  # attached. See
  # https://docs.haproxy.org/2.8/configuration.html#3.2-tune.lua.log.loggers
  tune.lua.log.loggers on
  tune.lua.log.stderr auto

defaults
  # set some timeouts (could be set in listen section)
  timeout connect 10s
  timeout server 1m
  timeout client 1m

# IDEA: I bet we could use the "do-resolve" action to perform dns resolution!
# server-default resolvers resolvconf
# tcp-request content do-resolve(txn.dst,<resolver>) var(txn.domain) if { var(txn.domain) -m found }
# Teach haproxy how to resolve dns names
resolvers resolvconf
  parse-resolv-conf

# The socks5 server
listen socks
  bind 127.0.0.1:1080
  mode tcp

  # print out log level "notice" for this listener
  log stdout format raw daemon notice

  # The lua script has 2 seconds to accept the connection before it times out.
  tcp-request inspect-delay 2s

  # Run the lua script named "socks5" to inspect the content of the connection
  # until the connection has been accepted or rejected.
  tcp-request content lua.socks5

  # Set the destination ip and port based on variables set in the lua script.
  tcp-request content set-dst-port var(txn.port)
  tcp-request content set-dst var(txn.dst)

  # (optional) prevent connecting to the host haproxy is running on because
  # that could bypass access restrictions
  #tcp-request content reject if { dst_is_local }

  # The special address 0.0.0.0:0 is used to allow rewriting the destination
  server s 0.0.0.0:0

# [0] How haproxy converts a variable to an address. Haproxy will read the typed
# variable we set inside the lua script and convert it into the appropriate
# address type. In our case, the variable is a string.
#
# For even more details...
#
# https://docs.haproxy.org/2.8/configuration.html#4.2-tcp-request%20content%20set-dst
#
# src/tcp_act.c tcp_action_req_set_dst()
#   (https://github.com/haproxy/haproxy/blob/v2.8.0/src/tcp_act.c#L103)
#
# src/sample.c sample_fetch_as_type()
# src/sample.c sample_casts
#   (https://github.com/haproxy/haproxy/blob/v2.8.0/src/sample.c#L979)
#
# We are converting a STR to ADDR, which uses the c_str2addr() method
#   (https://github.com/haproxy/haproxy/blob/v2.8.0/src/sample.c#L736)
#
# First it tries to parse the string as ipv4 dotted quad notation (a.b.c.d). If
# that fails, it tries to parse the string as an ipv6 address using
# inet_pton(3).

listen auth
  mode http
  bind *:8081
  log stdout format raw daemon debug
  http-request set-var(req.password) str(moo)
  http-request set-var(req.cookie_name) str(rodeo)
  http-request wait-for-body time 1s at-least 1k if METH_POST
  http-request lua.auth
  http-request return status 200 content-type "text/plain" string "success\n"
